<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyFramework</name>
    </assembly>
    <members>
        <member name="T:EasyFramework.Controllers.BaseController">
            <summary>
            控制器基类
            </summary>
        </member>
        <member name="M:EasyFramework.Controllers.BaseController.GetDBHelper">
            <summary>
            数据库访问类
            </summary>
            <returns></returns>
        </member>
        <member name="T:EasyFramework.Attr.BaseAttribute">
            <summary>
            基类属性
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.BaseAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:EasyFramework.Attr.ModelAttribute">
            <summary>
            数据库表与模型属性的映射
            </summary>
        </member>
        <member name="M:EasyFramework.Attr.ModelAttribute.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:EasyFramework.Attr.ModelAttribute.#ctor(System.String,System.String)">
            <summary>
            有参构造函数
            </summary>
            <param name="tableName">表名</param>
            <param name="primaryKey">主键</param>
        </member>
        <member name="P:EasyFramework.Attr.ModelAttribute.TableName">
            <summary>
            映射数据库表名
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelAttribute.PrimaryKey">
            <summary>
            映射数据库主键
            </summary>
        </member>
        <member name="T:EasyFramework.Attr.ModelProperty">
            <summary>
            Model属性
            </summary>
        </member>
        <member name="M:EasyFramework.Attr.ModelProperty.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:EasyFramework.Attr.ModelProperty.#ctor(System.String,System.String)">
            <summary>
            基本构造函数
            </summary>
            <param name="colName">列名</param>
            <param name="colType">字段类型</param>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.ColName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.ColType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.Explain">
            <summary>
            字段说明
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.IsNull">
            <summary>
            能否为空
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.MinLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:EasyFramework.Attr.ModelProperty.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="T:EasyFramework.Core.Attr.ControllerAttribute">
            <summary>
            控制器属性
            </summary>
        </member>
        <member name="P:EasyFramework.Core.Attr.ControllerAttribute.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:EasyFramework.Core.BaseController">
            <summary>
            控制器基类
            </summary>
        </member>
        <member name="M:EasyFramework.Core.BaseController.GetDBHelper">
            <summary>
            获取一个已经实例化的数据库帮助类
            </summary>
            <returns>一个已经实例化的数据库帮助类</returns>
        </member>
        <member name="M:EasyFramework.Core.BaseController.IsMobile">
            <summary>
            判断是否是移动端
            </summary>
            <returns>是移动端返回true否则返回false</returns>
        </member>
        <member name="T:EasyFramework.Core.Enum.MSDBType">
            <summary>
            MS Sql Server的DBType
            </summary>
        </member>
        <member name="M:EasyFramework.Core.Enum.MSDBType.GetMSDBType(System.String)">
            <summary>
            根据类型名称返回对应的Sql Server类型
            </summary>
            <param name="type">数据库类型名称</param>
            <returns>对应的数据库类型</returns>
        </member>
        <member name="M:EasyFramework.Core.Enum.MSDBType.GetTypeBySqlTypeName(System.String)">
            <summary>
            根据Sql Server的类型名称获取对应的C#类型
            </summary>
            <param name="type">Sql Server类型名称</param>
            <returns>对应C#中的类型</returns>
        </member>
        <member name="T:EasyFramework.DBAccess.DBHelper">
            <summary>
            数据库访问类
            </summary>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.#ctor">
            <summary>
            缺省无参构造函数
            </summary>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.#ctor(System.String)">
            <summary>
            有参构造函数
            </summary>
            <param name="connectStr">sql连接字符串</param>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行Sql语句返回受影响行数
            是对Spring中ExecuteNonQuery(CommandType.Text, sql)的封装
            </summary>
            <param name="sqlStr">执行的sql语句</param>
             /// <param name="parameters">可选sql参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.ExecuteScalar``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回sql语句结果第一行第一列 泛型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="sqlStr">sql语句</param>
            <param name="parameters">可选参数</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回sql语句结果第一行第一列 如无结果或异常则返回null 在逻辑层只需判断是否为null即可
            </summary>
            <param name="sqlStr">查询语句</param>
            <param name="parameters">可选参数</param>
            <returns></returns>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.GetDataTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            根据sql语句查询结果, 并返回DataTable, 如有多个表只返回第一个table
            </summary>
            <param name="sqlStr">sql执行语句</param>
            <param name="parameters">可选参数</param>
            <returns>返回一个数据表集</returns>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.GetDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            根据sql语句查询结果, 返回查询数据集
            </summary>
            <param name="sqlStr">sql语句</param>
            <param name="parameters">可选参数</param>
            <returns>返回dataset数据集</returns>
        </member>
        <member name="M:EasyFramework.DBAccess.DBHelper.CloseConnection(System.Data.SqlClient.SqlConnection)">
            <summary>
            关闭与数据库的持续连接
            </summary>
            <param name="connection">关闭指向数据库连接</param>
        </member>
        <member name="T:EasyFramework.Models.BaseModel">
            <summary>
            模型基类
            </summary>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.GetDBHelper">
            <summary>
            获取实例化之后的数据库帮助类
            </summary>
            <returns>一个已经实例化的数据库访问类</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.Save">
            <summary>
            更新或保存当前类
            </summary>
            <returns>true保存成功 false保存失败</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.Delete">
            <summary>
            根据model主键删除对应一条数据
            </summary>
            <returns>true删除成功, 否则删除失败,删除失败时请检查表主键</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.LoadById``1(System.Int32)">
            <summary>
            通过主键ID获取一个指定对象, 需有无参构造函数, 以及对象为引用类型
            </summary>
            <typeparam name="T">获取对象的类型</typeparam>
            <param name="id">主键id</param>
            <returns>返回指定对象实例</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.GetObjects``1(EasyFramework.Models.QueryCondition)">
            <summary>
            根据条件查询多个对象
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="queryCondition">查询条件</param>
            <returns>返回对应的泛型结果</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.Update(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Data.SqlClient.SqlParameter)">
            <summary>
            在数据库更新当前类
            </summary>
            <returns>true更新成功, false更新失败</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.Insert(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Reflection.PropertyInfo)">
            <summary>
            在数据库中插入一条新的数据
            </summary>
            <returns>返回一个bool值, true表示插入成功, 否则失败</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.GetModelProperty">
            <summary>
            获取类字段信息
            </summary>
            <returns>返回一个Key为字段名, Value为字段属性的字典</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.GetPropertyInfos(System.Type)">
            <summary>
            获取所有所传类字段的可访问属性
            </summary>
            <param name="type">访问类</param>
            <returns>所有字段属性数组</returns>
        </member>
        <member name="M:EasyFramework.Models.BaseModel.GetModelAttribute">
            <summary>
            获取模型类特性
            </summary>
            <returns>返回当前调用模型类的特性</returns>
        </member>
        <member name="T:EasyFramework.Models.QueryCondition">
            <summary>
            数据库查询条件类
            </summary>
        </member>
        <member name="M:EasyFramework.Models.QueryCondition.#ctor(System.String)">
            <summary>
            基本构造函数
            </summary>
            <param name="where">查询条件 例如: Where 1 = 1</param>
        </member>
        <member name="M:EasyFramework.Models.QueryCondition.#ctor(System.String,System.String,System.Int32)">
            <summary>
            查询条件
            </summary>
            <param name="where">查询条件 例如: Where 1 = 1</param>
            <param name="orderCol">排序列名称</param>
            <param name="orderBy">排序,默认为0, 0为升序, 否则为降序(非0对应desc)</param>
        </member>
        <member name="P:EasyFramework.Models.QueryCondition.Where">
            <summary>
            查询条件 例如: Where 1 = 1
            </summary>
        </member>
        <member name="P:EasyFramework.Models.QueryCondition.OrderCol">
            <summary>
            排序列名称
            </summary>
        </member>
        <member name="P:EasyFramework.Models.QueryCondition.OrderBy">
            <summary>
            排序,默认为0, 0为升序, 否则为降序
            </summary>
        </member>
    </members>
</doc>
